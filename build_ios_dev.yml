name: DEV_$(Build.BuildId)_$(SourceBranchName)_$(Date:yyyyMMdd)

trigger:
- develop

parameters:
- name: verbose
  displayName: 'verbose run'
  type: boolean
  default: false
- name: run_tests
  displayName: 'run flutter unit tests'
  type: boolean
  default: false

variables:
- group: silvernet

stages:
- stage: Build
  displayName: Build
  pool:
    vmImage: 'macOS-latest'
  jobs:
  - job: iosbuild
    displayName: Build iOS bundle
    steps:
    - task: Bash@3
      displayName: deploy maps api key
      inputs:
        targetType: 'inline'
        script: |
          sed -i "" "s/$(key_alias)/$DEV_MAPS_API_KEY/" $(Build.SourcesDirectory)/ios/Runner/AppDelegate.swift
          cat $(Build.SourcesDirectory)/ios/Runner/AppDelegate.swift
      env:
        DEV_MAPS_API_KEY: $(DEV_MAPS_API_KEY)
    - task: InstallAppleCertificate@2
      displayName: install Apple Certificate
      inputs:
        certSecureFile: 'develop_ios.p12'
        certPwd: $(DEV_P12password)
        keychain: 'temp'
    - task: InstallAppleProvisioningProfile@1
      displayName: install Apple Provisioning Profile
      inputs:
        provProfileSecureFile: 'DEV_azure_pipeline_kampus.mobileprovision'
        removeProfile: true
    - task: FlutterInstall@0
      inputs:
        mode: 'auto'
        channel: 'stable'
        version: 'latest'
    - task: Bash@3
      displayName: run flutter doctor
      inputs:
        targetType: 'inline'
        script: |
          $(FlutterToolPath)/flutter doctor -v
          $(FlutterToolPath)/flutter --version
      condition: eq(${{ parameters.verbose }}, 'true')
    - task: FlutterBuild@0
      displayName: build application
      inputs:
        target: ios
        projectDirectory: '$(Build.SourcesDirectory)'
    - task: FlutterTest@0
      displayName: "Run unit tests"
      inputs:
        generateCodeCoverageReport: true
        projectDirectory: '$(Build.SourcesDirectory)'
      condition: eq(${{ parameters.run_tests }}, 'true')
    - task: CopyFiles@2
      displayName: "Copy app to staging directory"
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)'
        contents: '**/ios/*'
        targetFolder: '$(Build.StagingDirectory)'
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      displayName: "Publish iOS files"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'ios_kampus_$(Build.BuildId)'
        publishLocation: 'Container'